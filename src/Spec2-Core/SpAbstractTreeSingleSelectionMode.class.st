Class {
	#name : #SpAbstractTreeSingleSelectionMode,
	#superclass : #Object,
	#traits : 'TObservable',
	#classTraits : 'TObservable classTrait',
	#instVars : [
		'#selection => ObservableSlot',
		'#presenter'
	],
	#category : #'Spec2-Core-Widgets-Tree'
}

{ #category : #'accessing method dictionary' }
SpAbstractTreeSingleSelectionMode class >> on: aPresenter [

	^ self new
		presenter: aPresenter;
		yourself
]

{ #category : #selection }
SpAbstractTreeSingleSelectionMode >> clearSelection [

	selection := #()
]

{ #category : #initialization }
SpAbstractTreeSingleSelectionMode >> initialize [
	self class initializeSlots: self.
	selection := #().
	super initialize.

]

{ #category : #testing }
SpAbstractTreeSingleSelectionMode >> isEmpty [
	
	^ selection isEmpty
]

{ #category : #accessing }
SpAbstractTreeSingleSelectionMode >> isMultipleSelection [
	^ false
]

{ #category : #accesing }
SpAbstractTreeSingleSelectionMode >> presenter: aPresenter [
	presenter := aPresenter
]

{ #category : #selection }
SpAbstractTreeSingleSelectionMode >> selectPath: aPath [
	self subclassResponsibility
]

{ #category : #selection }
SpAbstractTreeSingleSelectionMode >> selectPaths: pathArray [
	self subclassResponsibility
]

{ #category : #accessing }
SpAbstractTreeSingleSelectionMode >> selectedItem [
	^ self subclassResponsibility
]

{ #category : #accessing }
SpAbstractTreeSingleSelectionMode >> selectedPaths [
	^ self subclassResponsibility
]

{ #category : #selecting }
SpAbstractTreeSingleSelectionMode >> unselectAll [

	self clearSelection
]

{ #category : #'api - events' }
SpAbstractTreeSingleSelectionMode >> whenChangedDo: aBlock [ 
	
	self property: #selection whenChangedDo: aBlock 
]
